#!/usr/bin/env python3
"""
APLICACI√ìN FINAL PARA JEAN - VERSI√ìN CON TERMINAL INTEGRADA
Interfaz completa con logs en tiempo real
"""

import os
import sys
import json
import tkinter as tk
from tkinter import ttk, messagebox, simpledialog, scrolledtext
from datetime import datetime
import threading
import pandas as pd
import subprocess
import time

# Agregar path para imports
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

class AcademiaJeanAppTerminal:
    def __init__(self):
        self.root = tk.Tk()
        self.root.title("üé® Academia Jean - Sistema de Reportes")
        self.root.geometry("700x600")
        self.root.resizable(True, True)
        
        # Variables
        self.config = self.load_config()
        self.setup_environment()
        
        # Crear interfaz
        self.create_interface()
        
        # Centrar ventana
        self.center_window()
        
        # Log inicial
        self.log("üöÄ Sistema iniciado correctamente")
        self.log(f"üëã Bienvenido, {self.config['user_name']}")
        self.log(f"üìÇ Carpeta configurada: {self.config['drive_folder_id'][:30]}...")
    
    def load_config(self):
        """Carga configuraci√≥n con valores por defecto"""
        config_file = 'jean_config.json'
        default_config = {
            "drive_folder_id": "1jfaCkTzYh-rsvy2efmLjPjuIMEDGQ7Jv",
            "google_credentials_file": "jeanacademy-da03c7c92e89.json",
            "configured": True,
            "user_name": "Jean Fraisse",
            "academy_name": "√âcole Jean Fraisse"
        }
        
        if os.path.exists(config_file):
            try:
                with open(config_file, 'r', encoding='utf-8') as f:
                    saved_config = json.load(f)
                    default_config.update(saved_config)
            except:
                pass
        
        return default_config
    
    def save_config(self):
        """Guarda configuraci√≥n"""
        try:
            with open('jean_config.json', 'w', encoding='utf-8') as f:
                json.dump(self.config, f, indent=2, ensure_ascii=False)
        except Exception as e:
            self.log(f"‚ùå Error guardando configuraci√≥n: {e}")
    
    def setup_environment(self):
        """Configura variables de entorno"""
        os.environ['GOOGLE_SERVICE_ACCOUNT_JSON_PATH'] = self.config['google_credentials_file']
        os.environ['DRIVE_FOLDER_ID'] = self.config['drive_folder_id']
    
    def center_window(self):
        """Centra la ventana en la pantalla"""
        self.root.update_idletasks()
        width = self.root.winfo_width()
        height = self.root.winfo_height()
        x = (self.root.winfo_screenwidth() // 2) - (width // 2)
        y = (self.root.winfo_screenheight() // 2) - (height // 2)
        self.root.geometry(f"{width}x{height}+{x}+{y}")
    
    def log(self, message):
        """Agregar mensaje a la terminal"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        log_line = f"[{timestamp}] {message}\\n"
        
        # Agregar al final y hacer scroll autom√°tico
        self.terminal.insert(tk.END, log_line)
        self.terminal.see(tk.END)
        
        # Actualizar interfaz
        self.root.update_idletasks()
    
    def clear_terminal(self):
        """Limpiar terminal"""
        self.terminal.delete(1.0, tk.END)
        self.log("üßπ Terminal limpiada")
    
    def create_interface(self):
        """Crea la interfaz completa"""
        # Configurar estilo
        style = ttk.Style()
        style.theme_use('clam')
        
        # Frame principal
        main_frame = ttk.PanedWindow(self.root, orient=tk.VERTICAL)
        main_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        # ========== PANEL SUPERIOR - CONTROLES ==========
        control_frame = ttk.Frame(main_frame)
        main_frame.add(control_frame, weight=1)
        
        # T√≠tulo
        title_frame = ttk.Frame(control_frame)
        title_frame.pack(fill=tk.X, pady=(0, 15))
        
        title_label = tk.Label(
            title_frame,
            text="üé® Academia Jean - Sistema de Reportes",
            font=("Arial", 16, "bold"),
            fg="#1E3A8A"
        )
        title_label.pack()
        
        subtitle_label = tk.Label(
            title_frame,
            text="Rastrea Google Drive y genera reportes Excel autom√°ticamente",
            font=("Arial", 9),
            fg="#666666"
        )
        subtitle_label.pack()
        
        # Frame de configuraci√≥n
        config_frame = ttk.LabelFrame(control_frame, text="üìÅ Configuraci√≥n de Carpeta Google Drive", padding="10")
        config_frame.pack(fill=tk.X, pady=(0, 15))
        
        # ID de carpeta
        id_frame = ttk.Frame(config_frame)
        id_frame.pack(fill=tk.X, pady=(0, 10))
        
        ttk.Label(id_frame, text="ID Actual:", font=("Arial", 9, "bold")).pack(side=tk.LEFT)
        
        self.drive_id_var = tk.StringVar(value=self.config["drive_folder_id"][:40] + "...")
        id_label = ttk.Label(id_frame, textvariable=self.drive_id_var, font=("Arial", 8), foreground="#10B981")
        id_label.pack(side=tk.LEFT, padx=(10, 0))
        
        # Botones de configuraci√≥n
        button_frame = ttk.Frame(config_frame)
        button_frame.pack(fill=tk.X)
        
        change_btn = tk.Button(
            button_frame,
            text="üìù Cambiar Carpeta",
            command=self.change_drive_folder,
            bg="#3B82F6",
            fg="white",
            font=("Arial", 9, "bold"),
            relief=tk.FLAT
        )
        change_btn.pack(side=tk.LEFT, padx=(0, 10))
        
        help_btn = tk.Button(
            button_frame,
            text="‚ùì Ayuda",
            command=self.show_help,
            bg="#F3F4F6",
            font=("Arial", 9),
            relief=tk.FLAT
        )
        help_btn.pack(side=tk.LEFT)
        
        # Frame de acciones principales
        actions_frame = ttk.LabelFrame(control_frame, text="üöÄ Acciones Principales", padding="10")
        actions_frame.pack(fill=tk.X, pady=(0, 15))
        
        # Grid de botones principales
        buttons_grid = ttk.Frame(actions_frame)
        buttons_grid.pack(fill=tk.X)
        
        # Bot√≥n 1: Rastrear
        self.scan_button = tk.Button(
            buttons_grid,
            text="üîç 1. RASTREAR GOOGLE DRIVE",
            command=self.scan_drive_threaded,
            bg="#10B981",
            fg="white",
            font=("Arial", 11, "bold"),
            height=2,
            relief=tk.FLAT
        )
        self.scan_button.grid(row=0, column=0, sticky="ew", padx=(0, 5), pady=(0, 10))
        
        # Bot√≥n 2: Generar reporte
        self.report_button = tk.Button(
            buttons_grid,
            text="üìä 2. GENERAR REPORTE EXCEL",
            command=self.generate_report_threaded,
            bg="#1E3A8A",
            fg="white",
            font=("Arial", 11, "bold"),
            height=2,
            relief=tk.FLAT
        )
        self.report_button.grid(row=0, column=1, sticky="ew", padx=(5, 0), pady=(0, 10))
        
        # Configurar grid
        buttons_grid.columnconfigure(0, weight=1)
        buttons_grid.columnconfigure(1, weight=1)
        
        # Bot√≥n limpiar terminal
        clear_btn = tk.Button(
            buttons_grid,
            text="üßπ Limpiar Terminal",
            command=self.clear_terminal,
            bg="#6B7280",
            fg="white",
            font=("Arial", 9),
            relief=tk.FLAT
        )
        clear_btn.grid(row=1, column=0, columnspan=2, pady=(5, 0))
        
        # ========== PANEL INFERIOR - TERMINAL ==========
        terminal_frame = ttk.LabelFrame(main_frame, text="üìü Terminal - Progreso en Tiempo Real", padding="5")
        main_frame.add(terminal_frame, weight=1)
        
        # Terminal con scroll
        self.terminal = scrolledtext.ScrolledText(
            terminal_frame,
            height=15,
            font=("Courier New", 9),
            bg="#1a1a1a",
            fg="#00ff00",
            insertbackground="#00ff00",
            wrap=tk.WORD
        )
        self.terminal.pack(fill=tk.BOTH, expand=True)
        
        # Frame de estado
        status_frame = ttk.Frame(control_frame)
        status_frame.pack(fill=tk.X)
        
        # Estado de credenciales
        cred_status = "‚úÖ Credenciales OK" if os.path.exists(self.config['google_credentials_file']) else "‚ö†Ô∏è Verificar credenciales"
        self.status_label = tk.Label(
            status_frame,
            text=f"Estado: {cred_status} | Usuario: {self.config['user_name']}",
            font=("Arial", 8),
            fg="#666666"
        )
        self.status_label.pack()
    
    def change_drive_folder(self):
        """Permite cambiar el ID de la carpeta"""
        self.log("‚öôÔ∏è Abriendo di√°logo para cambiar carpeta...")
        
        dialog_text = """Ingresa el ID de tu carpeta Google Drive:

üí° Para obtenerlo:
1. Abre la carpeta en Google Drive
2. Copia la URL completa
3. El ID es la parte despu√©s de '/folders/'

Ejemplo:
URL: https://drive.google.com/drive/folders/1ABC123XYZ
ID:  1ABC123XYZ"""
        
        new_id = simpledialog.askstring(
            "Cambiar Carpeta Google Drive",
            dialog_text,
            initialvalue=self.config['drive_folder_id']
        )
        
        if new_id and new_id.strip():
            old_id = self.config['drive_folder_id'][:30]
            self.config['drive_folder_id'] = new_id.strip()
            self.drive_id_var.set(new_id.strip()[:40] + "...")
            self.setup_environment()
            self.save_config()
            
            self.log(f"‚úÖ Carpeta actualizada:")
            self.log(f"   Anterior: {old_id}...")
            self.log(f"   Nueva: {new_id.strip()[:30]}...")
            self.log("üíæ Configuraci√≥n guardada")
            
            messagebox.showinfo("√âxito", "¬°Carpeta actualizada correctamente!")
        else:
            self.log("‚ùå Cambio de carpeta cancelado")
    
    def show_help(self):
        """Muestra ayuda detallada"""
        self.log("üìö Mostrando ayuda para obtener ID de carpeta...")
        
        help_text = """üîç GU√çA COMPLETA - OBTENER ID DE CARPETA GOOGLE DRIVE

üìã PASOS DETALLADOS:
1Ô∏è‚É£ Abre Google Drive en tu navegador web
2Ô∏è‚É£ Navega hasta la carpeta que contiene tus m√≥dulos
3Ô∏è‚É£ Haz clic en la carpeta para entrar
4Ô∏è‚É£ Copia la URL completa de la barra de direcciones
5Ô∏è‚É£ El ID es la parte despu√©s de '/folders/'

üìñ EJEMPLO PR√ÅCTICO:
URL completa: 
https://drive.google.com/drive/folders/1jfaCkTzYh-rsvy2efmLjPjuIMEDGQ7Jv

ID de la carpeta: 
1jfaCkTzYh-rsvy2efmLjPjuIMEDGQ7Jv

‚ö†Ô∏è REQUISITOS IMPORTANTES:
‚Ä¢ La carpeta debe contener las subcarpetas de m√≥dulos
‚Ä¢ El sistema tiene permisos de solo lectura
‚Ä¢ Funciona con carpetas compartidas

üéØ ESTRUCTURA ESPERADA:
Tu Carpeta/
‚îú‚îÄ‚îÄ M√≥dulo 1/
‚îú‚îÄ‚îÄ M√≥dulo 2/
‚îú‚îÄ‚îÄ M√≥dulo 3/
‚îî‚îÄ‚îÄ etc..."""
        
        messagebox.showinfo("Ayuda - ID de Carpeta Google Drive", help_text)
    
    def scan_drive_threaded(self):
        """Inicia rastreo en hilo separado"""
        self.scan_button.config(state=tk.DISABLED, text="üîÑ RASTREANDO...")
        self.log("üîç Iniciando rastreo de Google Drive...")
        threading.Thread(target=self.scan_drive, daemon=True).start()
    
    def scan_drive(self):
        """Escanea Google Drive con logs detallados"""
        try:
            self.log("üìÇ Importando cliente de Google Drive...")
            from app.ingest.drive_client import GoogleDriveClient
            
            self.log("üîê Autenticando con Google Drive...")
            client = GoogleDriveClient()
            
            self.log("üìÅ Obteniendo lista de m√≥dulos...")
            modules = client.list_folders_in_root()
            
            self.log(f"‚úÖ Rastreo completado exitosamente!")
            self.log(f"üìä RESULTADOS:")
            self.log(f"   ‚Ä¢ M√≥dulos detectados: {len(modules)}")
            self.log(f"   ‚Ä¢ Conexi√≥n: ‚úÖ Funcionando perfectamente")
            self.log(f"   ‚Ä¢ Estado: Listo para generar reportes")
            
            # Mostrar algunos m√≥dulos como ejemplo
            self.log(f"üìã Primeros m√≥dulos encontrados:")
            for i, module in enumerate(modules[:5], 1):
                self.log(f"   {i}. üìÅ {module['name']}")
            
            if len(modules) > 5:
                self.log(f"   ... y {len(modules) - 5} m√≥dulos m√°s")
            
            # Actualizar interfaz en hilo principal
            self.root.after(0, lambda: self.scan_completed(len(modules)))
            
        except Exception as e:
            error_msg = str(e)
            self.log(f"‚ùå ERROR durante el rastreo:")
            self.log(f"   {error_msg[:100]}...")
            self.root.after(0, lambda: self.scan_error(error_msg))
    
    def scan_completed(self, module_count):
        """Callback cuando el rastreo termina"""
        self.scan_button.config(state=tk.NORMAL, text="üîç 1. RASTREAR GOOGLE DRIVE")
        
        messagebox.showinfo(
            "üéâ Rastreo Completado",
            f"‚úÖ RASTREO EXITOSO\\n\\n"
            f"üìä Resultados:\\n"
            f"‚Ä¢ {module_count} m√≥dulos detectados\\n"
            f"‚Ä¢ Conexi√≥n: ‚úÖ Funcionando\\n"
            f"‚Ä¢ Sistema: ‚úÖ Listo\\n\\n"
            f"üéØ Ahora puedes generar tu reporte Excel"
        )
    
    def scan_error(self, error):
        """Callback cuando hay error en rastreo"""
        self.scan_button.config(state=tk.NORMAL, text="üîç 1. RASTREAR GOOGLE DRIVE")
        
        messagebox.showerror(
            "‚ùå Error de Conexi√≥n",
            f"No se pudo conectar a Google Drive:\\n\\n"
            f"Error: {error[:150]}...\\n\\n"
            f"üí° Soluciones:\\n"
            f"‚Ä¢ Verifica tu conexi√≥n a internet\\n"
            f"‚Ä¢ Confirma que el ID de carpeta sea correcto\\n"
            f"‚Ä¢ Intenta cambiar la carpeta si es necesario"
        )
    
    def generate_report_threaded(self):
        """Inicia generaci√≥n de reporte en hilo separado"""
        self.report_button.config(state=tk.DISABLED, text="üìä GENERANDO...")
        self.log("üìä Iniciando generaci√≥n de reporte Excel...")
        threading.Thread(target=self.generate_report, daemon=True).start()
    
    def generate_report(self):
        """Genera reporte con logs detallados"""
        try:
            self.log("üìÇ Importando cliente de Google Drive...")
            from app.ingest.drive_client import GoogleDriveClient
            
            self.log("üîê Conectando a Google Drive...")
            client = GoogleDriveClient()
            
            self.log("üìÅ Obteniendo lista de m√≥dulos...")
            modules = client.list_folders_in_root()
            self.log(f"   ‚úÖ {len(modules)} m√≥dulos encontrados")
            
            self.log("üîç Analizando archivos en cada m√≥dulo...")
            
            # Procesar m√≥dulos
            datos_entregas = []
            total_archivos = 0
            estudiantes_unicos = set()
            
            for i, module in enumerate(modules, 1):
                self.log(f"   üìÅ {i}/{len(modules)} - Procesando: {module['name']}")
                
                try:
                    files = client.list_files_in_folder(module['id'])
                    archivos_img = [f for f in files if f['name'].lower().endswith(('.jpg', '.jpeg', '.png'))]
                    
                    # Detectar estudiantes
                    estudiantes_modulo = set()
                    for file in files:
                        # Por metadata
                        if file.get('lastModifyingUser', {}).get('displayName'):
                            nombre = file['lastModifyingUser']['displayName']
                            estudiantes_modulo.add(nombre)
                            estudiantes_unicos.add(nombre)
                        
                        # Por nombre de archivo
                        nombre_archivo = file['name']
                        if '_' in nombre_archivo:
                            partes = nombre_archivo.split('_')
                            if len(partes) >= 2:
                                posible_nombre = partes[1].replace('.jpg', '').replace('.jpeg', '').replace('.png', '')
                                if len(posible_nombre) > 2 and not posible_nombre.isdigit():
                                    estudiantes_modulo.add(posible_nombre)
                                    estudiantes_unicos.add(posible_nombre)
                    
                    self.log(f"      üìä {len(files)} archivos, {len(estudiantes_modulo)} estudiantes")
                    
                    datos_entregas.append({
                        'M√≥dulo': module['name'],
                        'Total Archivos': len(files),
                        'Archivos de Imagen': len(archivos_img),
                        'Estudiantes': len(estudiantes_modulo),
                        'Lista Estudiantes': ', '.join(list(estudiantes_modulo)[:3]) + ('...' if len(estudiantes_modulo) > 3 else ''),
                        '√öltima Actividad': files[0]['modifiedTime'][:10] if files else 'Sin archivos',
                        'Estado': '‚úÖ Con entregas' if len(files) > 0 else '‚ö†Ô∏è Sin entregas'
                    })
                    
                    total_archivos += len(files)
                    
                except Exception as e:
                    self.log(f"      ‚ö†Ô∏è Error procesando m√≥dulo: {str(e)[:50]}...")
                    datos_entregas.append({
                        'M√≥dulo': module['name'],
                        'Total Archivos': 0,
                        'Archivos de Imagen': 0,
                        'Estudiantes': 0,
                        'Lista Estudiantes': 'Error de acceso',
                        '√öltima Actividad': 'Error',
                        'Estado': '‚ùå Error'
                    })
                
                # Peque√±a pausa para no sobrecargar la API
                time.sleep(0.1)
            
            self.log("üìÑ Creando archivo Excel...")
            
            # Crear Excel
            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            filename = f"reporte_academia_jean_{timestamp}.xlsx"
            
            with pd.ExcelWriter(filename, engine='xlsxwriter') as writer:
                # Hoja principal
                df = pd.DataFrame(datos_entregas)
                df.to_excel(writer, sheet_name='Reporte de Entregas', index=False)
                self.log("   ‚úÖ Hoja 'Reporte de Entregas' creada")
                
                # Hoja resumen
                modulos_activos = len([d for d in datos_entregas if d['Total Archivos'] > 0])
                resumen = pd.DataFrame([
                    {'Informaci√≥n': 'Academia', 'Valor': self.config['academy_name']},
                    {'Informaci√≥n': 'Generado por', 'Valor': self.config['user_name']},
                    {'Informaci√≥n': 'Fecha', 'Valor': datetime.now().strftime('%Y-%m-%d %H:%M:%S')},
                    {'Informaci√≥n': 'Total M√≥dulos', 'Valor': len(datos_entregas)},
                    {'Informaci√≥n': 'M√≥dulos Activos', 'Valor': modulos_activos},
                    {'Informaci√≥n': 'Total Archivos', 'Valor': total_archivos},
                    {'Informaci√≥n': 'Estudiantes √önicos', 'Valor': len(estudiantes_unicos)},
                ])
                resumen.to_excel(writer, sheet_name='Resumen Ejecutivo', index=False)
                self.log("   ‚úÖ Hoja 'Resumen Ejecutivo' creada")
                
                # Lista de estudiantes
                if estudiantes_unicos:
                    estudiantes_df = pd.DataFrame([
                        {'Estudiante': estudiante} for estudiante in sorted(estudiantes_unicos)
                    ])
                    estudiantes_df.to_excel(writer, sheet_name='Lista de Estudiantes', index=False)
                    self.log("   ‚úÖ Hoja 'Lista de Estudiantes' creada")
                
                # Formatear
                workbook = writer.book
                header_format = workbook.add_format({
                    'bold': True,
                    'bg_color': '#1E3A8A',
                    'font_color': 'white',
                    'border': 1
                })
                
                for sheet_name in ['Reporte de Entregas', 'Resumen Ejecutivo', 'Lista de Estudiantes']:
                    if sheet_name in writer.sheets:
                        worksheet = writer.sheets[sheet_name]
                        worksheet.autofit()
            
            self.log("‚úÖ REPORTE EXCEL GENERADO EXITOSAMENTE!")
            self.log(f"üìÅ Archivo: {filename}")
            self.log(f"üìä ESTAD√çSTICAS FINALES:")
            self.log(f"   ‚Ä¢ M√≥dulos analizados: {len(datos_entregas)}")
            self.log(f"   ‚Ä¢ M√≥dulos con entregas: {modulos_activos}")
            self.log(f"   ‚Ä¢ Archivos procesados: {total_archivos}")
            self.log(f"   ‚Ä¢ Estudiantes √∫nicos: {len(estudiantes_unicos)}")
            
            # Actualizar interfaz
            result = {
                'filename': filename,
                'modules': len(datos_entregas),
                'active_modules': modulos_activos,
                'files': total_archivos,
                'students': len(estudiantes_unicos)
            }
            
            self.root.after(0, lambda: self.report_completed(result))
            
        except Exception as e:
            error_msg = str(e)
            self.log(f"‚ùå ERROR generando reporte:")
            self.log(f"   {error_msg[:100]}...")
            self.root.after(0, lambda: self.report_error(error_msg))
    
    def report_completed(self, result):
        """Callback cuando el reporte termina"""
        self.report_button.config(state=tk.NORMAL, text="üìä 2. GENERAR REPORTE EXCEL")
        
        message = f"""‚úÖ REPORTE EXCEL GENERADO EXITOSAMENTE
        
üìÅ Archivo: {result['filename']}

üìä Estad√≠sticas Completas:
‚Ä¢ {result['modules']} m√≥dulos analizados
‚Ä¢ {result['active_modules']} m√≥dulos con entregas  
‚Ä¢ {result['files']} archivos procesados
‚Ä¢ {result['students']} estudiantes √∫nicos detectados

üìã El archivo contiene:
‚Ä¢ Hoja 'Reporte de Entregas' - Detalle por m√≥dulo
‚Ä¢ Hoja 'Resumen Ejecutivo' - Estad√≠sticas generales
‚Ä¢ Hoja 'Lista de Estudiantes' - Todos los estudiantes

¬øQuieres abrir el archivo Excel ahora?"""
        
        if messagebox.askyesno("üéâ Reporte Completado", message):
            try:
                if os.name == 'nt':  # Windows
                    os.startfile(result['filename'])
                    self.log(f"üìÇ Abriendo archivo en Windows...")
                else:  # macOS
                    subprocess.run(['open', result['filename']])
                    self.log(f"üìÇ Abriendo archivo en macOS...")
            except Exception as e:
                self.log(f"‚ö†Ô∏è No se pudo abrir autom√°ticamente: {e}")
                messagebox.showinfo("Informaci√≥n", f"Abre manualmente: {result['filename']}")
    
    def report_error(self, error):
        """Callback cuando hay error en reporte"""
        self.report_button.config(state=tk.NORMAL, text="üìä 2. GENERAR REPORTE EXCEL")
        
        messagebox.showerror(
            "‚ùå Error Generando Reporte",
            f"No se pudo generar el reporte:\\n\\n"
            f"Error: {error[:150]}...\\n\\n"
            f"üí° Sugerencias:\\n"
            f"‚Ä¢ Intenta primero 'Rastrear Google Drive'\\n"
            f"‚Ä¢ Verifica tu conexi√≥n a internet\\n"
            f"‚Ä¢ Revisa el terminal para m√°s detalles"
        )
    
    def run(self):
        """Ejecuta la aplicaci√≥n"""
        self.root.mainloop()

def main():
    """Funci√≥n principal"""
    try:
        app = AcademiaJeanAppTerminal()
        app.run()
    except Exception as e:
        import traceback
        error_msg = f"Error iniciando la aplicaci√≥n:\\n\\n{str(e)}\\n\\n{traceback.format_exc()}"
        
        # Intentar mostrar error en ventana
        try:
            root = tk.Tk()
            root.withdraw()
            messagebox.showerror("Error Fatal", error_msg)
        except:
            print(error_msg)

if __name__ == "__main__":
    main()